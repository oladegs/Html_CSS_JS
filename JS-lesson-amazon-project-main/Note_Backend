## Backend, Callbacks, Promises, and Async Wait

🌐 What does HTTP do?
HTTP stands for HyperText Transfer Protocol. It’s the communication system used between your browser (client) and a web server.

🚀 What HTTP does:
📤 Sends requests:
When you visit a website, your browser uses HTTP to send a request to the server (usually a GET request).

📥 Gets responses:
The server processes that request and sends back a response — like HTML, JSON, images, or other data.

📦 Delivers content:
HTTP handles how web pages, images, and data get delivered to your screen.

🧠 Simple analogy:
HTTP is like a waiter 🧑‍🍳 at a restaurant.
You (the browser) tell the waiter what you want (send a request),
the kitchen (server) prepares it,
and the waiter brings it back to you (response).

HTTP methods are GET, POST, PUT, DELETE!

========================================================
To send HTTP message : we are going to use a class called XMLHTTPRequest (Built in class)

✅ The built-in class XMLHttpRequest in JavaScript handles both:

📨 Request

- It sends an HTTP request from your JavaScript code to a server.
- You can choose the method (GET, POST, etc.), set headers, and send data if needed.

📩 Response
It also receives the response from the server and gives you access to:

Response status (xhr.status)
Response text/data (xhr.responseText)
Headers, etc.

🔁 Summary:
XMLHttpRequest is used to send requests and receive responses between the browser and a server without reloading the page.

Example:
const xhr = new XMLHttpRequest();
xhr.open("GET", "https://example.com/api/data");

xhr.onload = function () {
console.log(xhr.responseText); // This is the response
};

xhr.send(); // This sends the request
So yes — it does both request and response handling.
=====================================================
URL - Uniform Resource Locator : like an address, but for the internet, helps us locate another computer on the internet
https://amazon.com
http - means we are using http to communicate with this computer , s means it is secured version of http
amazon.com - domain name : like an address, points to another computer on the internet

This code creates and sends an HTTP GET request to https://supersimplebackend.dev using XMLHttpRequest. Here's what's happening step by step:
new XMLHttpRequest() – creates a new request object.
xhr.open("GET", url) – sets the method and destination.
xhr.send() – sends the request to the server.
💡 It initiates communication with a backend server to request data.

In the network tab, messages would only appear here after we open the console - refresh the page

=====================================================
💬 Request ➡️ Response Cycle (Client ↔️ Server)

🧑‍💻 (Frontend/Client)
|
| 🌐 Request 👉 (e.g. GET, POST)
| ------------------------------->
| Message to Server
|
| 🖥️ (Backend/Server)
| Receives request 📩
| Processes it ⚙️
| Sends back data 📤
|
| 👈 Response 💡 (e.g. JSON, HTML)
| <-------------------------------
| Message from Server
v
🧑‍💻 (Frontend gets the data & displays it)

✅ Answer to Your Question:
Is it automatic to get a response back when we send a request?
🔸 Yes, every HTTP request expects a response from the backend — even if it's just a confirmation like 200 OK, or an error like 404 Not Found.

However:
If the server crashes, or
There’s a network issue,
Then the response might fail or not arrive, and you’ll need error handling (onerror, try-catch, etc.) to deal with it.

Summary:

- Request = You ask for something (e.g. data)
- Response = Server replies (with what you asked or an error)
- It's like a conversation: every question (request) should get an answer (response). ✅

# Without changing anything , help me comment this better with symbols , the comment should be in a way a layman can understand

Asynchronous code allows a program to start a task (like fetching data from a server) without waiting for it to finish before moving on to the next line.

Instead of blocking the whole program, it continues running other code and handles the result later when it's ready (using callbacks, promises, or async/await).

🔁 Simple Example:
console.log("1");
setTimeout(() => {
console.log("2"); // Runs later
}, 1000);
console.log("3");

Output :
1
3
2

# We send the request, wait for the reponse and save the response in our code

- A backend only supports a certain set of URL paths
  404 - Status code

- 🔁 The backend can respond with various data formats — such as text, JSON, HTML, or even 🖼️ images.
  🧾 When we receive a JSON response, it's actually just text (a JSON-formatted string).
  🔄 We use JSON.parse() to convert that text into a 🧠 JavaScript object that we can work with in our code.

  🌐 This enables seamless transmission of JavaScript objects between the frontend and the backend over the internet.

🌐 When you type a URL into the browser and hit enter, the browser automatically sends an 📤 HTTP GET request to the server.
🧭 In simple terms: Typing a URL + hitting enter = making a GET request.

- Depending on the type of response, the browser can respond in a more useful way

- In JS, fns are values aand we can use it as a parameter

🧠 What is a Callback Function?
A callback function is a function that you pass as an argument to another function, and it's called later — usually after something happens (like data loading, a button click, etc.).

It’s called “callback” because the code you’re giving it will be called back when the time is right.

🔍 What is an Anonymous Function?
An anonymous function is a function that:
✅ Has no name
✅ Is often used as a callback
✅ Is written directly where it's needed, instead of defining it somewhere else

🔄 Anonymous function as a callback:
setTimeout(function() {
console.log("Hello after 2 seconds");
}, 2000);

This is an anonymous function — no name is given.
But you can't use it alone — it must be passed into something, like another function (setTimeout()).

You passed an anonymous function to setTimeout.
It runs after 2 seconds.
No need to name the function — it’s used only once.

🔼 Arrow function version (also anonymous):
setTimeout(() => {
console.log("Hello after 2 seconds");
}, 2000);

✅ This is an anonymous arrow function — still no name, just a shorter way to write it.

🚀 Using a backend in our project:
📤 We send a request to the server,
⏳ use a callback to wait for the response,
✅ and once the response arrives, we run the rest of our 🧠 logic/code.

🌟 What is a Promise?
A Promise is like a promise in real life — it represents an action that will finish in the future, either with:

✅ Success (the promise is fulfilled), or

❌ Failure (the promise is rejected)

🧩 Visual Analogy: Ordering a Package Online 📦

- Step 1: You order something online 🛒
  You get a promise: “Your package will arrive soon.”
  Right now, the package is pending — you don’t have it yet.

- Step 2: Waiting for delivery ⏳
  While you wait, you can keep doing other things. The promise is still pending.

- Step 3: Package arrives or fails to arrive 🚚
  Success (fulfilled): The package arrives at your door. 🎉
  Failure (rejected): The package gets lost or delayed. ❌

🧑‍💻 How it looks in code:
let packagePromise = new Promise((resolve, reject) => {
// Simulate waiting for package delivery (async)
setTimeout(() => {
let delivered = true; // or false for failure

    if (delivered) {
      resolve("Package received! 🎉");
    } else {
      reject("Package lost! ❌");
    }

}, 3000);
});

🔄 Handling the Promise:
packagePromise
.then((message) => {
console.log("Success:", message); // Runs if resolve() is called
})
.catch((error) => {
console.log("Error:", error); // Runs if reject() is called
})

⚡ Visual Flowchart:
[Start]
↓
[Promise Created] ——— Pending (waiting)
↓
/ \
Resolve Reject
↓ ↓
Success Failure
(then) (catch)

🧠 Summary:
Promise = a placeholder for a value that will arrive later
.then() runs when the promise is fulfilled (success)
.catch() runs when the promise is rejected (error)
While waiting, your program can do other things (non-blocking!)

🆕 new Promise(...)
🛠️ This is the constructor that creates a Promise object.

🔁 The function you pass inside:
(resolve) => { ... }
🧠 This is called the executor function.
⚡ JavaScript automatically runs this function as soon as the Promise is created.

📥 The executor function receives two special functions as parameters:
✅ resolve → Call this to mark the Promise as fulfilled (success)
❌ reject → Call this to mark the Promise as rejected (error)
📝 (In your example, only resolve is used.)

🧩 Inside your executor:
loadProducts(() => {
resolve(); ✅
});
📦 You call loadProducts(...) to start loading data.
🕒 When it finishes, it calls resolve().
📣 This tells JavaScript:
✅ “The Promise is done and was successful!”


🧠 What’s the Goal?
Both callbacks and promises are ways to handle asynchronous code — things that take time, like loading data or waiting for user input.

But they work differently.
⚡ Quick Comparison:
Feature	Callback	- Promise
🔄      Style	  -  Function passed as argument	Object returned immediately
📦      Value handling -	Manually inside callback - Automatically with .then()
❌ Error handling	Must be handled manually - Built-in with .catch()
🤯 Downsides	Callback Hell 😩 - 	Cleaner, avoids nesting
✅ Modern usage	Old-style (still works) -	Preferred in modern JS ✅

- Promises help keep our code flat and avoid nesting:
allows us to pass a value, we can run multiple promises at the same time using Promise.all()